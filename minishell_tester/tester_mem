#!/bin/bash

MINISHELL_PATH="../minishell"

# Run a specific test if the file name was specified
if [[ $1 ]]; then
    test_lists=(
        $1
    )
else
    test_lists=(
        "syntax"
        "builtins"
        "pipes"
        "redirects"
        "extras"
        # "memory-tester"
    )
fi

if [[ $1 == "wildcards"  || $1 == "bonus" ]]; then
    MINISHELL_PATH="../minishell_bonus"
fi

BOLD="\e[1m"
YELLOW="\033[0;33m"
GREY="\033[38;5;244m"
PURPLE="\033[0;35m"
BLUE="\033[0;36m"
RED="\e[0;31m"
END="\033[0m"

chmod 000 ./test_files/invalid_permission
mkdir ./outfiles
mkdir ./mini_outfiles
mkdir ./bash_outfiles

printf $RED
echo "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•"
echo "                                                                                             ";
echo " Running Tests with Valgrind Integration! "
echo "                                                                                             ";
echo "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•"

PROMPT=$(echo -e "\nexit\n" | $MINISHELL_PATH | head -n 1 | sed "s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g" )
REMOVE_COLORS="sed s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
REMOVE_EXIT="grep -v ^exit$"

leaks_found=0

for testfile in ${test_lists[*]}; do
    printf $RED
    echo ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî $testfile

    while read teste; do
        ((i++))

        rm -rf ./outfiles/*
        rm -rf ./mini_outfiles/*
        
        # Run Valgrind with minishell and capture output
        VALGRIND_LOG="valgrind.log"
        MINI_OUTPUT=$(echo -e "$teste" | valgrind --leak-check=full --error-exitcode=1 --suppressions=readline.supp --log-file=$VALGRIND_LOG $MINISHELL_PATH 2>/dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT)
        # # VALGRIND_ERRORS=$(grep "ERROR SUMMARY" $VALGRIND_LOG | awk '{print $4}')
        
        # DEFINITELY_LOST=$(grep "definitely lost" $VALGRIND_LOG | awk '{print $4}' | tr -d ',')
        # INDIRECTLY_LOST=$(grep "indirectly lost" $VALGRIND_LOG | awk '{print $4}' | tr -d ',')
        # POSSIBLY_LOST=$(grep "possibly lost" $VALGRIND_LOG | awk '{print $4}' | tr -d ',')
        # STILL_REACHABLE=$(grep "still reachable" $VALGRIND_LOG | awk '{print $4}' | tr -d ',')

        # # Check for memory leaks
        # if [[ "$DEFINITELY_LOST" -gt 0 || "$INDIRECTLY_LOST" -gt 0 || "$POSSIBLY_LOST" -gt 0 ]]; then
        #     VALGRIND_ERRORS=1  # Memory leak detected
        # else
        #     VALGRIND_ERRORS=0  # No memory leak
        # fi

        # Parse Valgrind output and sanitize values
        DEFINITELY_LOST=$(grep "definitely lost" $VALGRIND_LOG | awk '{gsub(/[^0-9]/, "", $4); print $4}' | tr -d ',\n' || echo 0)
        INDIRECTLY_LOST=$(grep "indirectly lost" $VALGRIND_LOG | awk '{gsub(/[^0-9]/, "", $4); print $4}' | tr -d ',\n' || echo 0)
        POSSIBLY_LOST=$(grep "possibly lost" $VALGRIND_LOG | awk '{gsub(/[^0-9]/, "", $4); print $4}' | tr -d ',\n' || echo 0)
        STILL_REACHABLE=$(grep "still reachable" $VALGRIND_LOG | awk '{gsub(/[^0-9]/, "", $4); print $4}' | tr -d ',\n' || echo 0)

        # Debugging (optional): Print sanitized values
        # echo "DEFINITELY_LOST=$DEFINITELY_LOST, INDIRECTLY_LOST=$INDIRECTLY_LOST, POSSIBLY_LOST=$POSSIBLY_LOST, STILL_REACHABLE=$STILL_REACHABLE"
        # if [ "$DEFINITELY_LOST" -gt 0 ]; then
		# 	echo "Definitely lost memory detected!"
		# fi
        # Check for memory leaks
        if [[ "$DEFINITELY_LOST" -gt 0 || "$INDIRECTLY_LOST" -gt 0 || "$POSSIBLY_LOST" -gt 0  || "$STILL_REACHABLE" -gt 0 ]]; then
            VALGRIND_ERRORS=1  # Memory leak detected
        else
            VALGRIND_ERRORS=0  # No memory leak
        fi
        
        MINI_OUTFILES=$(cp ./outfiles/* ./mini_outfiles &>/dev/null)
        MINI_EXIT_CODE=$(echo -e "$MINISHELL_PATH\n$teste\necho \$?\nexit\n" | bash 2>/dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT | tail -n 1)
        MINI_ERROR_MSG=$(trap "" PIPE && echo "$teste" | $MINISHELL_PATH 2>&1 > /dev/null | grep -o '[^:]*$')

        rm -rf ./outfiles/*
        rm -rf ./bash_outfiles/*
        BASH_OUTPUT=$(echo -e "$teste" | bash 2>/dev/null)
        BASH_EXIT_CODE=$(echo $?)
        BASH_OUTFILES=$(cp ./outfiles/* ./bash_outfiles &>/dev/null)
        BASH_ERROR_MSG=$(trap "" PIPE && echo "$teste" | bash 2>&1 > /dev/null | grep -o '[^:]*$' | head -n1)

        OUTFILES_DIFF=$(diff --brief ./mini_outfiles ./bash_outfiles)

        printf $YELLOW
        printf "Test %3s: " $i

        # Check if outputs match and no memory leaks
        if [[ "$MINI_OUTPUT" == "$BASH_OUTPUT" && "$MINI_EXIT_CODE" == "$BASH_EXIT_CODE" && -z "$OUTFILES_DIFF" && "$VALGRIND_ERRORS" == "0" ]]; then
            printf ‚úÖ
            ((ok++))
            if [ "$MINI_ERROR_MSG" != "$BASH_ERROR_MSG" ]; then
                printf "‚ö†Ô∏è "
            fi
        else
            printf ‚ùå
            if [[ "$VALGRIND_ERRORS" != "0" ]]; then
                printf " [Memory Leak Detected] "
                ((leaks_found++))
            fi
        fi

        printf "$GREY $teste \n$END"

        # Debugging information
        if [ "$OUTFILES_DIFF" ]; then
            echo "$OUTFILES_DIFF"
            echo mini outfiles:
            cat ./mini_outfiles/*
            echo bash outfiles:
            cat ./bash_outfiles/*
        fi
        if [ "$MINI_OUTPUT" != "$BASH_OUTPUT" ]; then
            echo mini output = \($MINI_OUTPUT\)
            echo bash output = \($BASH_OUTPUT\)
        fi
        if [ "$MINI_EXIT_CODE" != "$BASH_EXIT_CODE" ]; then
            echo mini exit code = $MINI_EXIT_CODE
            echo bash exit code = $BASH_EXIT_CODE
        fi
        if [ "$MINI_ERROR_MSG" != "$BASH_ERROR_MSG" ]; then
            echo mini error = \($MINI_ERROR_MSG\)
            echo bash error = \($BASH_ERROR_MSG\)
        fi
    done < $testfile
done

chmod 666 ./test_files/invalid_permission
rm -rf ./outfiles
rm -rf ./mini_outfiles
rm -rf ./bash_outfiles

printf $PURPLE
printf $BOLD
echo $ok/$i tests passed.

if [[ "$leaks_found" -gt 0 ]]; then
    echo "$leaks_found memory leaks detected during testing."
    exit 1
else
    echo "No memory leaks detected."
fi

if [[ "$ok" == "$i" ]]; then
    echo "üéä üéä üéä All tests passed! üéä üéä üéä"
    exit 0
else
    echo "üò≠ üò≠ üò≠ Some tests failed! üò≠ üò≠ üò≠"
    exit 1
fi
