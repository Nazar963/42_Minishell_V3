Subject tests

✅prolema se passi tab prima di command(	echo -nnnnnnn "No newline")
✅prolema se passi tab dopo i commandi anche  (pwd	)

////////////
COMPILE

✅Use "make -n" to see if compilation use "-Wall -Wextra -Werror". 
If not, select the "invalid compilation" flag.
✅minishell compiles without any errors. If not, select the flag.
✅The Makefile must not re-link. If not, select the flag.


////////////
SIMPLE COMMAND & GLOBAL VARIABLES

Execute a simple command with an absolute path like /bin/ls,
or any other command without any options.

How many global variables are used? Why?
Ask the evaluated student to give you a concrete example 
of why it feels mandatory or logical.

Check the global variable. This global variable cannot 
provide any other information or data access than the 
number of a received signal.

✅Test an empty command.
✅Test only spaces or tabs.

❗bin/true - memory problems => non leaka


////////////
ARGUMENTS

✅ Execute a simple command with an absolute path 
like /bin/ls, or any other command with arguments 
but without any quotes or double quotes.
Repeat multiple times with different commands and arguments:

	/bin/ls -l
	/bin/echo Hello World
	/bin/cat /etc/passwd
	/bin/grep root /etc/passwd
	/bin/date +%Y-%m-%d


////////////
ECHO

Execute the echo command with or without arguments, or the -n option.
Repeat multiple times with different arguments.

	✅	echo -nnnnnnn "No newline"
	✅echo -nnn -n "No newline"
	(!!!!) echo "Special characters: !@#$%^&*()"  // non dobbiamo gestire !@#
	✅echo -n "Combining" "multiple" "arguments"
	✅echo -n "End of tests"

////////////
EXIT

Execute exit command with or without arguments.
Repeat multiple times with different arguments:

	✅exit -0000  // non stampa exit OK
	✅exit ----
	✅exit 00000 // non stampa exit OK
	✅exit 999999999 // non stampa exit OK
	✅exit -42 // non stampa exit OK
	✅exit --42
	✅exit 1 2 3
	✅exit 0x10 // non stampa exit e errore:
		exit
		bash: exit: 0x10: numeric argument required

	✅exit 0755 // non stampa exit OK
	✅exit 3.14 / non stampa exit e errore:
		exit
		bash: exit: 3.14: numeric argument required
	✅exit "string"
	✅exit ''


////////////
RETURN VALUE OF A PROCESS

✅Return value of a process
Execute a simple command with an absolute path like /bin/ls, 
or any other command with arguments but without any quotes 
and double quotes. Then execute echo $?
Check the printed value. You can do the same in bash in order
to compare the results.
Repeat multiple times with different commands and arguments:

	✅	/bin/true
	✅	/bin/false
	✅	/bin/ls
	❗	/bin/ls non_existent_file
		minishell(2)
		bash(127)
	✅	/bin/grep root /etc/passwd
	✅	/bin/grep non_existent_pattern /etc/passwd
	✅	/bin/echo "Hello, World!"
	

	✅/bin/echo
	✅/bin/sleep 1
	✅ /bin/exit 42 // memory problems => non leaka
	

Try some wrong commands like '/bin/ls filethatdoesntexist'

	✅	/bin/echo "Unclosed quote
	(wrong return value) (parsing)
	✅	/bin/echo "Hello, World!
		
	✅	/bin/ls filethatdoesntexist
	✅	/bin/cat nonexistentfile
	✅	/bin/grep non_existent_pattern /etc/passwd
	✅	/bin/rm non_existent_file
	✅	/bin/mkdir /existing_directory
	✅/bin/invalidcommand // memory problmes (?/) => non leaka

Try anything like expr $? + $?. (io ho aggiunto echo $? dopo)
	✅	/bin/true
	✅	/bin/false

	✅	/bin/true
	✅	/bin/true

	✅	/bin/false
	✅	/bin/false

	✅	/bin/ls
	✅	/bin/ls non_existent_file

	✅	/bin/echo "Hello"
	✅	/bin/echo "World"



////////////
SIGNALS
✅ctrl-C in an empty prompt should display a new line with a new prompt.
	non fa vedere ^C - non richiesto nel subject
✅ctrl-\ in an empty prompt should not do anything.

✅ctrl-D in an empty prompt should quit minishell --> RELAUNCH!

✅ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.
The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.
	non fa vedere ^C - non richiesto nel subject
✅ctrl-D in a prompt after you wrote some stuff should not do anything.

✅ctrl-\ in a prompt after you wrote some stuff should not do anything.

✅Try ctrl-C after running a blocking command like cat without arguments or grep "something".

	minishell> cat
	^C - non fa vedere ^C - non richiesto nel subject
	minishell> 


✅Try ctrl-\ after running a blocking command like cat without arguments or grep "something".
	non fa niente, mentre bash da Quit. Controllare nel subject
✅Try ctrl-D after running a blocking command like cat without arguments or grep "something".


////////////
DOUBLE QUOTES

Execute a simple command with arguments and, this time, use also double quotes (you should try to include whitespaces too).

	✅echo "Hello, World!"
	✅echo "   This is a test with spaces"
	✅echo "Another test with multiple words"
	✅❗echo "Special characters: !@#$%^&*()" (non dobbiamo gestire special chars)
	✅echo "1234567890"
	✅echo "Newline\nin\necho"
	✅❗echo "Quotes inside quotes: \"Hello\"" (non dobbiamo gestire caratteri speciali, tipo slash)
	✅echo "Combining" "multiple" "arguments"
	✅ls -l "my folder"
	✅grep "pattern" "file with spaces.txt"

✅Try a command like : echo "cat lol.c | cat > lol.c"

Try anything except $.
	✅find . -name "*.txt"
	✅cat /etc/passwd


////////////
SINGLE QUOTES

Execute commands with single quotes as arguments.

✅echo "Hello, World!"
	✅echo '   This is a test with spaces'
	✅echo 'Another test with multiple words'
	✅echo 'Special characters: !@#$%^&*()' (non dobbiamo gestire special chars)
	✅echo '1234567890'
	✅echo 'Newline\nin\necho'
	✅echo 'Quotes inside quotes: "Hello"' (non dobbiamo gestire caratteri speciali, tipo slash)
	✅echo 'Combining' 'multiple' 'arguments'
	✅ls -l 'my folder'
	✅grep 'pattern' 'file with spaces.txt'

Try empty arguments.
	✅echo ''
	✅ls ''
	✅grep '' ''
	✅❗find . -name '' -exec echo '' \; (special char ;, senza - tutto ok)
	✅touch ''
	✅rm ''
	✅mkdir ''
	✅rmdir ''

Try environment variables, whitespaces, pipes, redirection in the single quotes.
	✅/bin/echo '$HOME' | /bin/grep 'user'
		
	✅/bin/echo 'This is a test with spaces' | /bin/grep 'test'
	✅/bin/cat output.txt | /bin/grep 'Hello'

	✅/bin/echo 'Hello' > output.txt
	✅/bin/echo 'Hello' >> output.txt
	✅/bin/cat output.txt


✅echo '$USER' must print "$USER".

Nothing should be interpreted.

////////////
ENV
Check if env shows you the current environment variables.
	Tuto a posto, ma ordine e' diverso per varie motivi, per esempio
	l'ordine di iniziliazzazione dipende da quando si inizializzano.
	+ algrotimi di sort di default sono diversi  - non e richiesto dil 
	subject.
	(non e' un errrore)
il metodo di vedere uguali - usare env | sort.
	❗ env | sort 
	(abbiamo piu che in bash(per esempio LD_LIBRARY_PATH=/usr/lib/debug) - da verificre cosa dice subject +
	 _=/usr/bin/valgrind invece di _=/usr/bin/env)



////////////
EXPORT
Export environment variables, create new ones and replace old ones.
 
	✅export c=1
	✅export c+=2
	✅env | grep "c"


✅Creamo una nuova:
	export NEW_VAR="Hello, World!"
	env | grep NEW_VAR
	

✅Sostituizione di una nuova:
	export NEW_VAR="New Value"
	env | grep NEW_VAR


✅Creamo una nuova numerica (non si puo, command not found)
	export NUM_VAR=12345
	env | grep NUM_VAR
	

✅NUova vuota:
	export EMPTY_VAR=""
	env | grep EMPTY_VAR
	

✅Export di var esistente:
	export PATH
	env | grep PATH

✅Sostituizione di una attuale (non si puo, command not found): 
	export PATH="/new/path"
	env | grep PATH
	

////////////18.01
UNSET 

Export environment variables, create new ones and replace old ones.
Use unset to remove some of them.
Check the result with env.


	✅export PATH
	✅env | grep PATH
	

	✅export PATH="/new/path"
	✅env | grep PATH

	✅export NEW_VAR="Hello, World!"
	✅env | grep NEW_VAR

	✅	export MY_VAR="This is a test"
	✅	env | grep MY_VAR

	✅	unset NEW_VAR
	✅	env | grep NEW_VAR

	✅	unset MY_VAR
	✅	env | grep MY_VAR

	✅unset PATH
	✅env | grep PATH 


	✅❗  unset TES;T  /// non dobbiano gestire simboli speciali
	mini exit code = 0
	bash exit code = 127
	mini error = ()
	bash error = ( command not found)





////////////
CD


Use the command cd to move the working directory and check if you are in the right directory with /bin/ls
Repeat multiple times with working and not working cd
Also, try '.' and '..' as arguments.

	❌ cd echo
	

	❌ cd echo echo 
	

	❌ cd - ananas dot jpeg 


	✅	cd /home
	✅/bin/ls

	✅cd /nonexistent_directory
	✅/bin/ls

	✅cd ..
	✅/bin/ls

	✅cd .
	✅/bin/ls

	✅cd ~
	✅/bin/ls

	✅mkdir "test directory"
	✅cd "test directory"
	✅/bin/ls
	✅cd ..
	✅rmdir "test directory"


	✅mkdir -p test/dir
	✅cd test/dir
	✅/bin/ls
	✅cd ../..
	✅/bin/ls
	✅rmdir test/dir
	✅rmdir test



////////////
✅PWD

Use the command pwd.
Repeat multiple times in different directories.


////////////
RELATIVE PATH

Execute commands but this time use a relative path.

Repeat multiple times in different directories with a complex 
relative path (lots of ..).


✅# Spostamento nella sottodirectory ed esecuzione del comando con un percorso relativo
	mkdir -p test/dir/subdir
	cd test/dir/subdir
	pwd

✅# Spostamento nella directory superiore ed esecuzione del comando con un percorso relativo
	cd ../../..
	pwd

✅# Spostamento nella directory corrente ed esecuzione del comando con un percorso relativo
	cd .
	pwd

# Spostamento nella directory home ed esecuzione del comando con un percorso relativo
	❗cd ~ //non dobbiamo gestire
	pwd

✅# Spostamento in una directory complessa con molti ..
	mkdir -p test/dir/subdir/anotherdir
	cd test/dir/subdir/anotherdir
	pwd
	cd ../../../../..
	pwd


✅# Eliminazione delle directory di test
	❗cd - // non dobbiamo gestire 
	rmdir test/dir/subdir/anotherdir
	cd ~
	rmdir test/dir/subdir/anotherdir
	rmdir test/dir/subdir
	rmdir test/dir
	rmdir test

//////////// Dopo pull
ENVIRONMENT PATH

Execute commands but this time without any path
(ls, wc, awk and so forth).
	ls
	wc -l /etc/passwd
	awk '{print $1}' /etc/passwd

Unset the $PATH and ensure commands are not working anymore.
	
	❌unset PATH
	❌ls
	wc -l /etc/passwd
	awk '{print $1}' /etc/passwd

Set the $PATH to a multiple directory value (directory1:directory2)
and ensure that directories are checked in order from left to right.
	export PATH=/bin:/usr/bin
	ls
	wc -l /etc/passwd
	awk '{print $1}' /etc/passwd

	export PATH=/usr/bin:/bin
	ls
	wc -l /etc/passwd
	awk '{print $1}' /etc/passwd


////////////
REDICRECTION
- Execute commands with redirections < and/or >
- Repeat multiple times with different commands and arguments and 
sometimes change > with >>
- Check if multiple tries of the same redirections fail.
- Test << redirection (it doesn't have to update the history).

✅# Reindirizzamento dell'output in un file
	echo "Hello, World!" > output.txt
	✅cat output.txt

✅# Reindirizzamento dell'output in un file con aggiunta
	echo "This is a test." >> output.txt
	✅cat output.txt


✅# Reindirizzamento dell'input da un file
	✅cat < output.txt

# Reindirizzamento degli errori in un file
	✅❌ls non_existent_file 2> error.txt // 2> - non dobbiamo gestire
	cat error.txt

# Reindirizzamento combinato dell'output e degli errori
	✅❌ls non_existent_file > output.txt 2>&1 // 2> - non dobbiamo gestire
	cat output.txt

✅#   Tentativi multipli dello stesso reindirizzamento
	echo "First attempt" > output.txt
	echo "Second attempt" > output.txt
	✅cat output.txt

	echo "First attempt" >> output.txt
	echo "Second attempt" >> output.txt
	✅cat output.txt

✅#  Test del reindirizzamento << (non deve aggiornare la cronologia)
	cat << EOF
	This is a test
	with heredoc
	EOF
	/// non funziona





////////////
PIPES


- Execute commands with pipes like 'cat file | grep bla | more'
	
	✅cat /etc/passwd | grep root | more


- Repeat multiple times with different commands and arguments.
	✅cat /etc/passwd | grep bash | wc -l
	✅ls -l | grep '^d' | wc -l
	
	
		✅echo "Hello, World!" | tr ' ' '\n' | sort
	❗ ps aux | grep root | less // non capisco come verificare
		bash se premere ctrl + D: 
		exit
		There are stopped jobs.

- Try some wrong commands like 'ls filethatdoesntexist | grep bla | more'
	✅ls filethatdoesntexist | grep bla | more
	✅cat non_existent_file | grep bla | more

- Try to mix pipes and redirections. 
	✅cat /etc/passwd | grep root > output.txt
	✅cat output.txt | wc -l
	✅ls -l | grep '^d' > dirs.txt
	✅cat dirs.txt | wc -l
	❗echo "Hello, World!" | tr ' ' '\n' | sort > sorted.txt

////////////
GO CRAZY AND HISTORY

	❌ cat | cat | ls
	se mettere ctr+Z -> conditional jump 
	

////////////
ENVIRONMENT VARIABLES
- Execute echo with some environment variables ($variable) as arguments.
- Check that $ is interpreted as an environment variable.
	✅echo $HOME
	✅echo $PATH
	✅echo $USER

- Check that double quotes interpolate $.
	✅echo "Home directory: $HOME"
	✅echo "Path: $PATH"
	✅echo "User: $USER"

- ✅Check that USER exists. Otherwise, set it.
	if [ -z "$USER" ]; then
  export USER="default_user"
	fi
	echo $USER

- ✅echo "$USER" should print the value of the USER variable.




Memory Leaks


✅export PATH=/usr/bin | printenv | grep PATH 
✅export PATH=/usr/local/bin | pwd
✅export LANG=C | printenv | cut -d= -f1 | grep LANG 
✅ $T.


////////////
Compile

Compile

Use "make -n" to see if compilation use "-Wall -Wextra -Werror". If not, select the "invalid compilation" flag.

minishell compiles without any errors. If not, select the flag.

The Makefile must not re-link. If not, select the flag.

////////
Guidelines

Please follow the guidelines below:

Only grade the work that was turned in to the Git repository of the evaluated student or group.

Double-check that the Git repository belongs to the student(s). Ensure that the project is the one expected. Also, check that 'git clone' is used in an empty folder.

Check carefully that no malicious aliases were used to fool you into evaluating something that is not the content of the official repository.

To avoid any surprises and if applicable, review together any scripts used to facilitate the grading (scripts for testing or automation).

If you have not completed the assignment you are going to evaluate, you must read the entire subject prior to starting the evaluation process.

Use the available flags to report an empty repository, a non-functioning program, a Norm error, cheating, and so forth. In these cases, the evaluation process ends and the final grade is 0, or -42 in the case of cheating. However, except for cheating, students are strongly encouraged to review together the work that was turned in, in order to identify any mistakes that shouldn't be repeated in the future.

Remember that for the duration of the defense, no segfaults or other unexpected, premature, or uncontrolled terminations of the program will be tolerated, else the final grade is 0. Use the appropriate flag.

You should never have to edit any file except the configuration file if it exists. If you want to edit a file, take the time to explain the reasons with the evaluated student and make sure both of you are okay with this.

You must also verify the absence of memory leaks. Any memory allocated on the heap must be properly freed before the end of execution.

You are allowed to use any of the different tools available on the computer, such as leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag.

# --------------------------------------------------------------------------- #
#                                     NIZZ                                    #
# --------------------------------------------------------------------------- #
- <DONE> Try ctrl-\ after running a blocking command like cat without arguments or grep "something".

- <DONE> unset PATH
  <DONE> env | grep PATH

- <DONE> heredoc doesn’t have to update the history!

- <DONE> cat /etc/passwd | grep root | more

- <DONE> conditional jump
	- <DONE> echo "Hello, World!" | tr ' ' '\n' | sort
	- <DONE> ps aux | grep root | less // non capisco come verificare

- <DONE> Try to mix pipes and redirections. ❌ conditional jumps
	- <DONE> cat /etc/passwd | grep root > output.txt
	- <DONE> cat output.txt | wc -l
	- <DONE> ls -l | grep '^d' > dirs.txt
	- <DONE> cat dirs.txt | wc -l
	- <DONE> echo "Hello, World!" | tr ' ' '\n' | sort > sorted.txt
	- <DONE> bash se premere ctrl + D: 
			- <DONE> exit
			- <DONE> There are stopped jobs.

- <DONE> cat | cat | ls
# --------------------------------------------------------------------------- #